---
version: 2.1

orbs:
  jq: circleci/jq@2.2.0

commands:

  setup-docker-build-environment:
    description: set the environment variables needed within the docker build environment in circleci
    steps:
      - run:
          name: set the env var based on branch
          command: |
              DOCKER_IMAGE_VERSION=$(echo $(cat package.json) | jq -r '.version')
              DOCKER_IMAGE_TAG="${CIRCLE_PROJECT_REPONAME}:${VERSION}"
              
              case "$CIRCLE_BRANCH" in
                dev|develop)
                  echo "SETTING DEV ENVIRONMENT VARIABLES"
                  echo "export SOME_VAR_NAME='dev'" >> "$BASH_ENV"
                  ;;
                master)
                  eecho "SETTING MASTER ENVIRONMENT VARIABLES"
                  ;;
                *)
                  echo "NO ENV VAR SET - DEFAULTING"
                  echo "export DOCKER_IMAGE_TAG='${DOCKER_IMAGE_TAG}'" >> "$BASH_ENV"
                  ;;
              esac

  build-docker-image:
    description: Build a docker image for the simple superhero service
    parameters:
      project_name:
        type: string
      dockerfile_path:
        type: string
    steps:
      - jq/install
      - setup_remote_docker:
         docker_layer_caching: true
      - add_ssh_keys:
          fingerprints:
            - 93:a9:f3:d3:97:84:fe:e3:a2:63:9e:fe:3f:be:6e:73
      - run:
          name: verify
          command: printenv | sort
      - run:
          name: Build docker image
          command: |
            docker build --no-cache --rm --tag ${DOCKER_IMAGE_TAG}  --build-arg NODE=14 -f << parameters.dockerfile_path >> .
            
  
  run-docker-container:
    description: "we've built the container, let's run it for tests"
    steps:
      - setup_remote_docker:
         docker_layer_caching: true
      - run:
          name: docker run command
          command: |
            docker image ls
            echo ==========================
            printenv | sort
            echo docker run ${DOCKER_IMAGE_TAG}
            docker run ${DOCKER_IMAGE_TAG}
  
  setup-sss-project:
    description: setup simple superhero service specific stuff
    steps:
       - run: 
          name: generate self signed certs
          command: openssl req -new -newkey rsa:4096 -x509 -sha256 -days 3650 -nodes -keyout sss-key.pem -out sss-cert.pem -subj "/C=US/ST=of Confusion/L=Gotham/O=/OU=/CN="
       - run:
          name: npm install
          command: |
            sudo apt-get install -y nodejs
            npm install

jobs:
 
  build-sss:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup-docker-build-environment
      - setup-sss-project
      - build-docker-image:
          project_name: ${CIRCLE_PROJECT_REPONAME}
          dockerfile_path: ./Dockerfile

  run-sss:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup-docker-build-environment
      - run-docker-container

  tests-cors:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup-docker-build-environment
      - run:
          name: valid cors test
          command: 'npm run test:cors:valid'
      - run:
          name: invalid cors test
          command: 'npm run test:cors:invalid'

  
workflows:
  
  test-build:
    jobs:

      # =============================================
      # DEV CONFIG
      # =============================================
      - build-sss:
          filters:
            branches:
              ignore:
                - master
      
      - run-sss:
          filters:
            branches:
              ignore:
                - master
          requires:
            - build-sss
      
      # cors test sss
      - tests-cors:
          filters:
            branches:
              ignore:
                - master
          requires:
            - build-sss
            - run-sss

 
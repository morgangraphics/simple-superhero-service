{
	"info": {
		"_postman_id": "9bdf737e-5e18-466e-8e15-ef15ea510e55",
		"name": "simple super hero service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "getDC",
			"item": [
				{
					"name": "/dc?format=json&limit=10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"limit returns 10 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(10);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc?format=json&limit=10",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/dc?limit=0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"limit returns 6896 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(6896);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc?format=json&limit=0",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "0"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/dc?h=name,id,eye,appearances,year&limit=10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"response object all keys present check\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'id', 'eye', 'appearances', 'year');",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"id\": \"string\",",
									"        \"eye\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"limit returns 10 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(10);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc?h=name,id,eye,appearances,year&limit=10",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year"
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc?help=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"test if help is printed\", function () {",
									"    const helpText = pm.response.text();",
									"    pm.expect(helpText).to.include('headers');",
									"    pm.expect(helpText).to.include('The identity status');",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc?help=true",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc?limit=3&pretty=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"second result result is superman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name).to.eql('superman (clark kent)');",
									"});",
									"",
									"",
									"pm.test(\"response object all keys present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'page_id', 'urlslug', 'id', 'align', 'eye', 'hair', 'sex',",
									"    'gsm', 'alive', 'appearances', 'first appearance', 'year');",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"page_id\": \"integer\",",
									"        \"name\": \"string\",",
									"        \"url_slug\": \"string\",",
									"        \"id\": \"string\",",
									"        \"align\": \"string\",",
									"        \"eye\": \"string\",",
									"        \"sex\": \"string\",",
									"        \"gsm\": \"string\",",
									"        \"alive\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"first appearance\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc?limit=3&pretty=true",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "pretty",
									"value": "true"
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc?random=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"limit returns default of 100 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(100);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc?random=true",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "15",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true"
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc?limit=3&s=name:desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is wolverine\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('superman (clark kent)');",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc?limit=3&s=name:desc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:desc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc?h=name,alive,year&limit=10&s=year:asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is batman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"response object all keys present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'alive', 'year');",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"alive\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"sorting by year - match first entries\", function () {",
									"    const jsonData = pm.response.json();",
									"    const years = jsonData.map(y => y.year).sort();",
									"    pm.expect(jsonData[0].year).to.eql(years[0]);",
									"});",
									"",
									"pm.test(\"sorting by year - second entry is less than or equal to first entry\", function () {",
									"    const jsonData = pm.response.json();",
									"    const years = jsonData.map(y => y.year).sort();",
									"    pm.expect(jsonData[0].year).to.be.lte(jsonData[1].year);",
									"});",
									"",
									"pm.test(\"limit returns 10 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(10);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc?h=name,alive,year&limit=10&s=year:asc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,alive,year"
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "year:asc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc?limit=50&random=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f25b498c-42c7-4b3b-a1b4-da2f3504b68a",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"limit returns 50 random results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.globals.set(\"random_1\", jsonData);",
									"    pm.expect(jsonData).to.have.lengthOf(50);",
									"});",
									"",
									"pm.test(\"check for randomnes between by Set\", function () {",
									"    const jsonData = pm.response.json();",
									"    const pids = jsonData.map(id => id.page_id);",
									"    const setpid = new Set(pids);",
									"    const spid = [...setpid];",
									"    pm.expect(pids).to.have.lengthOf(50);",
									"    pm.expect(spid).to.have.lengthOf(50);",
									"});",
									"",
									"pm.test(\"check for randomness round two - compare first and second tests\", function () {",
									"    const url = `https://${pm.environment.get('base_url')}/dc?limit=50&random=true`;",
									"    pm.sendRequest(url, function (err, response) {",
									"        const jsonData = response.json();",
									"        const pids0 = pm.globals.get('random_1').map(id => id.page_id);",
									"        const pids1 = jsonData.map(id => id.page_id);",
									"        pm.expect(pids0).to.have.lengthOf(50);",
									"        pm.expect(pids1).to.have.lengthOf(50);",
									"    });",
									"});",
									"",
									"// It is possible to have some overlaping numnbers between the two tests which is fine as",
									"// long as it's no more then 3 overlapping numbers. Out of 16,376 options, this shouldn't happen often",
									"pm.test(\"check for randomness round three - uniqueness tolerance\", function () {",
									"    const url = `https://${pm.environment.get('base_url')}/dc?limit=50&random=true`;",
									"    pm.sendRequest(url, function (err, response) {",
									"        const jsonData = response.json();",
									"        const pids0 = pm.globals.get('random_1').map(id => id.page_id);",
									"        const pids1 = jsonData.map(id => id.page_id);",
									"        const setpid = new Set(pids0.concat(pids1));",
									"        const spid = [...setpid];",
									"        pm.expect(spid.length).to.be.gte(97);",
									"        pm.globals.unset('random_1');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc?limit=50&random=true",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,alive,gsm,first appearance,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true"
								},
								{
									"key": "s",
									"value": "year:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc?limit=5&random=true&seed=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"limit returns 5 random results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.globals.set(\"random_seed_1\", jsonData);",
									"    pm.expect(jsonData).to.have.lengthOf(5);",
									"});",
									"",
									"pm.test(\"check is results are seeded\", function () {",
									"    const url = `https://${pm.environment.get('base_url')}/dc?limit=5&random=true&seed=true`;",
									"    pm.sendRequest(url, function (err, response) {",
									"        const jsonData = response.json();",
									"        const pids0 = pm.globals.get('random_seed_1').map(id => id.page_id);",
									"        const pids1 = jsonData.map(id => id.page_id);",
									"        pm.expect(pids0).to.eql(pids1);",
									"        pm.globals.unset('random_seed_1');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc?limit=5&random=true&seed=true",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true"
								},
								{
									"key": "s",
									"value": "year:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "getDCCharacter",
			"item": [
				{
					"name": "/dc/bat man",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is batman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/bat man/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								"bat man",
								""
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/dc/batman,superman?s=name:asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is batman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"test number of batmans = 3\", function () {",
									"    const jsonData = pm.response.json();",
									"    const spiders = jsonData.filter(x => x.name.includes('bat'))",
									"    pm.expect(spiders).to.have.lengthOf(3);",
									"});",
									"",
									"pm.test(\"test number of supermans = 1\", function () {",
									"    const jsonData = pm.response.json();",
									"    const thors = jsonData.filter(x => x.name.includes('super'))",
									"    pm.expect(thors).to.have.lengthOf(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/batman,superman?s=name:asc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								"batman,superman"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "0",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/dc/green lantern?h=name,first appearance,appearances,year&limit=10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is iron man\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('bizarro green lantern (new earth)');",
									"});",
									"",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'first appearance', 'appearances', 'year');",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/green lantern?h=name,first appearance,appearances,year&s=name:asc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								"green lantern"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,first appearance,appearances,year"
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/bat+man",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result is batman (bruce wayne)\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"check all results contain bat and man\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['bat', 'man'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/bat+man",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								"bat+man"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/bat+man+earth?s=name:desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result contains the string bizarro\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.include('bizarro');",
									"});",
									"",
									"pm.test(\"check all results contain bat, man, and earth\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['bat', 'man', 'earth'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/bat+man+earth?s=name:desc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								"bat+man+earth"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:desc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/bat+man,-earth?s=name:asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"sex\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"check all results contain bat and man, but exclude earth\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['bat', 'man'].every(bit => string.includes(bit) && !string.includes('earth'))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/bat+man,-earth?s=name:asc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								"bat+man,-earth"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/man,-woman?h=name,first appearance,appearances,sex,year&s=year:asc,appearances:desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response object all keys present check\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'appearances', 'first appearance', 'sex', 'year');",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"sex\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"check all results contain man, but exclude woman\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['man'].every(bit => string.includes(bit) && !string.includes('woman'))",
									"        );",
									"    });",
									"});",
									"",
									"pm.test(\"check sort order for year 1966\", function () {",
									"    const jsonData = pm.response.json();",
									"    const sorted = jsonData.filter(x => x.year === 1966);",
									"    pm.expect(sorted[0].year).to.be.eql(sorted[1].year);",
									"    pm.expect(sorted[0].appearances).to.be.gte(sorted[1].appearances);",
									"pm.environment.unset(\"variable_key\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/man,-woman?h=name,first appearance,appearances,sex,year&s=year:asc,appearances:desc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								"man,-woman"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,first appearance,appearances,sex,year"
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "year:asc,appearances:desc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/superman/?help",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"test if help is printed\", function () {",
									"    const helpText = pm.response.text();",
									"    pm.expect(helpText).to.include('headers');",
									"    pm.expect(helpText).to.include('The identity status');",
									"});",
									"",
									"pm.test(\"test if its the right version of help\", function () {",
									"    const helpText = pm.response.text();",
									"    pm.expect(helpText).to.include('superman');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/superman?help",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								"superman"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								},
								{
									"key": "help",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "postDC",
			"item": [
				{
					"name": "/dc/ - single character as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is batman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"batman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/dc/ - characters as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is batman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"test number of batmans = 3\", function () {",
									"    const jsonData = pm.response.json();",
									"    const bats = jsonData.filter(x => x.name.includes('bat'))",
									"    pm.expect(bats).to.have.lengthOf(3);",
									"});",
									"",
									"pm.test(\"test number of lanterns = 3\", function () {",
									"    const jsonData = pm.response.json();",
									"    const lanterns = jsonData.filter(x => x.name.includes('lantern'))",
									"    pm.expect(lanterns).to.have.lengthOf(3);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"batman,green lantern\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/dc/ - characters as array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is batman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"test number of batmans = 3\", function () {",
									"    const jsonData = pm.response.json();",
									"    const bats = jsonData.filter(x => x.name.includes('bat'))",
									"    pm.expect(bats).to.have.lengthOf(3);",
									"});",
									"",
									"pm.test(\"test number of lanterns = 3\", function () {",
									"    const jsonData = pm.response.json();",
									"    const lanterns = jsonData.filter(x => x.name.includes('lantern'))",
									"    pm.expect(lanterns).to.have.lengthOf(3);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"batman\" ,\"green lantern\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/dc/ - character with the headers name,first appearance,appearances,year as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is batman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'first appearance', 'appearances', 'year');",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"batman\",\n\t\"h\": \"name,first appearance,appearances,year\",\n\t\"limit\" : 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/ - character with the headers name,first appearance,appearances,year as array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is batman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'first appearance', 'appearances', 'year');",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"batman\",\n\t\"h\": [\"name\" ,\"first appearance\", \"appearances\", \"year\"],\n\t\"limit\" : 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/ - AND keywords as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result is batman (bruce wayne)\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('batman (bruce wayne)');",
									"});",
									"",
									"pm.test(\"check all results contain bat and man\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['bat', 'man'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"bat+man\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/  - AND keywords as array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"tests if any character name contains bat, man, super, and woman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(0);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"bat+man\", \"super+woman\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/ - AND keywords OR keyword as array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"check all results contain bat AND man OR super\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['bat', 'man', 'super'].some(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"bat+man\", \"super\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/ - AND kewords with sort as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result contains the string bizarro\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.include('bizarro');",
									"});",
									"",
									"pm.test(\"check all results contain bat, man\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['bat', 'man'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"bat+man\"],\n\t\"s\": \"name:desc\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/ - AND kewords with sort as array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result contains the string bizarro\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.include('bizarro');",
									"});",
									"",
									"pm.test(\"check all results contain spider, man\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['bat', 'man'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"bat+man\"],\n\t\"s\": [\n\t\t{ \"column\": \"name\", \"sort\": \"desc\" }\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/ - AND kewords with sort as object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result contains the string bizarro\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.include('bizarro');",
									"});",
									"",
									"pm.test(\"check all results contain spider, man\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['bat', 'man'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"bat+man\"],\n\t\"s\": { \"column\": \"name\", \"sort\": \"desc\" }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/ - AND kewords with exclusions as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"sex\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"check all results contain bat and man, but exclude earth\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['bat', 'man'].every(bit => string.includes(bit) && !string.includes('earth'))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"bat+man,-earth\",\n\t\"h\": [\"name\", \"first appearance\", \"appearances\", \"sex\", \"year\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/dc/ - keword with exclusion and with the headers name,first appearance,appearances,sex,year with multisort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response object all keys present check\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'appearances', 'first appearance', 'sex', 'year');",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"sex\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"check all results contain man, but exclude woman\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['man'].every(bit => string.includes(bit) && !string.includes('woman'))",
									"        );",
									"    });",
									"});",
									"",
									"pm.test(\"check sort order for year 1963\", function () {",
									"    const jsonData = pm.response.json();",
									"    const sorted = jsonData.filter(x => x.year === 1966);",
									"    pm.expect(sorted[0].year).to.be.eql(sorted[1].year);",
									"    pm.expect(sorted[0].appearances).to.be.gte(sorted[1].appearances);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"man,-woman\",\n\t\"h\": [\"name\", \"first appearance\", \"appearances\", \"sex\", \"year\"],\n\t\"s\": [\n\t\t{ \"column\": \"year\", \"sort\": \"asc\" },\n\t\t{ \"column\": \"appearances\", \"sort\": \"desc\" }\n\t]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/dc/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dc",
								""
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "getMarvel",
			"item": [
				{
					"name": "/marvel?format=json&limit=10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('spider-man (peter parker)');",
									"});",
									"",
									"pm.test(\"limit returns 10 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(10);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel?format=json&limit=10",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/marvel?limit=0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('spider-man (peter parker)');",
									"});",
									"",
									"pm.test(\"limit returns 16,376 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(16376);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel?format=json&limit=0",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "0"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/marvel?h=name,id,eye,appearances,year&limit=10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('spider-man (peter parker)');",
									"});",
									"",
									"pm.test(\"response object all keys present check\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'id', 'eye', 'appearances', 'year');",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"id\": \"string\",",
									"        \"eye\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"limit returns 10 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(10);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel?h=name,id,eye,appearances,year&limit=10",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year"
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel?help=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"test if help is printed\", function () {",
									"    const helpText = pm.response.text();",
									"    pm.expect(helpText).to.include('headers');",
									"    pm.expect(helpText).to.include('The identity status');",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel?help=true",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel?limit=3&pretty=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"second result result is captain america\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name).to.eql('captain america (steven rogers)');",
									"});",
									"",
									"",
									"pm.test(\"response object all keys present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'page_id', 'urlslug', 'id', 'align', 'eye', 'hair', 'sex',",
									"    'gsm', 'alive', 'appearances', 'first appearance', 'year');",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"page_id\": \"integer\",",
									"        \"name\": \"string\",",
									"        \"url_slug\": \"string\",",
									"        \"id\": \"string\",",
									"        \"align\": \"string\",",
									"        \"eye\": \"string\",",
									"        \"sex\": \"string\",",
									"        \"gsm\": \"string\",",
									"        \"alive\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"first appearance\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel?limit=3&pretty=true",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "pretty",
									"value": "true"
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel?random=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"limit returns default of 100 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(100);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel?random=true",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "15",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true"
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel?limit=3&s=name:desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is wolverine\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('wolverine (james \\\"logan\\\" howlett)');",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel?limit=3&s=name:desc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:desc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel?h=name,appearances,year&limit=10&s=year:asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is captain america\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('captain america (steven rogers)');",
									"});",
									"",
									"pm.test(\"response object all keys present\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'appearances', 'year');",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"sorting by year - match first entries\", function () {",
									"    const jsonData = pm.response.json();",
									"    const years = jsonData.map(y => y.year).sort();",
									"    pm.expect(jsonData[0].year).to.eql(years[0]);",
									"});",
									"",
									"pm.test(\"sorting by year - second entry is less than or equal to first entry\", function () {",
									"    const jsonData = pm.response.json();",
									"    const years = jsonData.map(y => y.year).sort();",
									"    pm.expect(jsonData[0].year).to.be.lte(jsonData[1].year);",
									"});",
									"",
									"pm.test(\"limit returns 10 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(10);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel?h=name,appearances,year&limit=10&s=year:asc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,appearances,year"
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "year:asc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel?limit=50&random=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f25b498c-42c7-4b3b-a1b4-da2f3504b68a",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"limit returns 50 random results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.globals.set(\"random_1\", jsonData);",
									"    pm.expect(jsonData).to.have.lengthOf(50);",
									"});",
									"",
									"pm.test(\"check for randomnes between by Set\", function () {",
									"    const jsonData = pm.response.json();",
									"    const pids = jsonData.map(id => id.page_id);",
									"    const setpid = new Set(pids);",
									"    const spid = [...setpid];",
									"    pm.expect(pids).to.have.lengthOf(50);",
									"    pm.expect(spid).to.have.lengthOf(50);",
									"});",
									"",
									"pm.test(\"check for randomness round two - compare first and second tests\", function () {",
									"    const url = `https://${pm.environment.get('base_url')}/marvel?limit=50&random=true`;",
									"    pm.sendRequest(url, function (err, response) {",
									"        const jsonData = response.json();",
									"        const pids0 = pm.globals.get('random_1').map(id => id.page_id);",
									"        const pids1 = jsonData.map(id => id.page_id);",
									"        pm.expect(pids0).to.have.lengthOf(50);",
									"        pm.expect(pids1).to.have.lengthOf(50);",
									"    });",
									"});",
									"",
									"// It is possible to have some overlaping numnbers between the two tests which is fine as",
									"// long as it's no more then 3 overlapping numbers. Out of 16,376 options, this shouldn't happen often",
									"pm.test(\"check for randomness round three - uniqueness tolerance\", function () {",
									"    const url = `https://${pm.environment.get('base_url')}/marvel?limit=50&random=true`;",
									"    pm.sendRequest(url, function (err, response) {",
									"        const jsonData = response.json();",
									"        const pids0 = pm.globals.get('random_1').map(id => id.page_id);",
									"        const pids1 = jsonData.map(id => id.page_id);",
									"        const setpid = new Set(pids0.concat(pids1));",
									"        const spid = [...setpid];",
									"        pm.expect(spid.length).to.be.gte(97);",
									"        pm.globals.unset('random_1');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel?limit=50&random=true",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true"
								},
								{
									"key": "s",
									"value": "year:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel?limit=5&random=true&seed=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"limit returns 5 random results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.globals.set(\"random_seed_1\", jsonData);",
									"    pm.expect(jsonData).to.have.lengthOf(5);",
									"});",
									"",
									"pm.test(\"check is results are seeded\", function () {",
									"    const url = `https://${pm.environment.get('base_url')}/marvel?limit=5&random=true&seed=true`;",
									"    pm.sendRequest(url, function (err, response) {",
									"        const jsonData = response.json();",
									"        const pids0 = pm.globals.get('random_seed_1').map(id => id.page_id);",
									"        const pids1 = jsonData.map(id => id.page_id);",
									"        pm.expect(pids0).to.eql(pids1);",
									"        pm.globals.unset('random_seed_1');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel?limit=5&random=true&seed=true",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true"
								},
								{
									"key": "s",
									"value": "year:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "getMarvelCharacter",
			"item": [
				{
					"name": "/marvel/spider man",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('spider-man (peter parker)');",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/spider man/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								"spider man",
								""
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/marvel/spider man,thor odinson?s=name:asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('spider-man (peter parker)');",
									"});",
									"",
									"pm.test(\"test number of spidermans = 3\", function () {",
									"    const jsonData = pm.response.json();",
									"    const spiders = jsonData.filter(x => x.name.includes('spider'))",
									"    pm.expect(spiders).to.have.lengthOf(3);",
									"});",
									"",
									"pm.test(\"test number of thors = 8\", function () {",
									"    const jsonData = pm.response.json();",
									"    const thors = jsonData.filter(x => x.name.includes('thor'))",
									"    pm.expect(thors).to.have.lengthOf(8);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/spider man,thor odinson?s=name:asc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								"spider man,thor odinson"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "0",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/marvel/iron man?h=name,first appearance,appearances,year&limit=10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is iron man\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('iron man (anthony \\\"tony\\\" stark)');",
									"});",
									"",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'first appearance', 'appearances', 'year');",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"limit returns 5 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(5);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/iron man?h=name,first appearance,appearances,year&s=name:asc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								"iron man"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,first appearance,appearances,year"
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/spider+man",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result is spider-man (peter parker)\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('spider-man (peter parker)');",
									"});",
									"",
									"pm.test(\"check all results contain spider and man\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['spider', 'man'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/spider+man",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								"spider+man"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/spider+man+earth?s=name:desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result contains the string vern\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.include('vern');",
									"});",
									"",
									"pm.test(\"check all results contain spider, man, and earth\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['spider', 'man', 'earth'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/spider+man+earth?s=name:desc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								"spider+man+earth"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:desc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/spider+man,-earth?s=name:asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"sex\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"check all results contain spider and man, but exclude earth\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['spider', 'man'].every(bit => string.includes(bit) && !string.includes('earth'))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/spider+man,-earth?s=name:asc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								"spider+man,-earth"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/man,-woman?h=name,first appearance,appearances,sex,year&s=year:asc,appearances:desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response object all keys present check\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'appearances', 'first appearance', 'sex', 'year');",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"sex\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"check all results contain man, but exclude woman\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['man'].every(bit => string.includes(bit) && !string.includes('woman'))",
									"        );",
									"    });",
									"});",
									"",
									"pm.test(\"check sort order for year 1963\", function () {",
									"    const jsonData = pm.response.json();",
									"    const sorted = jsonData.filter(x => x.year === 1963);",
									"    pm.expect(sorted[0].year).to.be.eql(sorted[1].year);",
									"    pm.expect(sorted[0].appearances).to.be.gte(sorted[1].appearances);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/man,-woman?h=name,first appearance,appearances,sex,year&s=year:asc,appearances:desc",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								"man,-woman"
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,first appearance,appearances,sex,year"
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "year:asc,appearances:desc"
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/spiderman/?help",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"test if help is printed\", function () {",
									"    const helpText = pm.response.text();",
									"    pm.expect(helpText).to.include('headers');",
									"    pm.expect(helpText).to.include('The identity status');",
									"});",
									"",
									"pm.test(\"test if its the right version of help\", function () {",
									"    const helpText = pm.response.text();",
									"    pm.expect(helpText).to.include('spider+man');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/spider man/?help",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								"spider man",
								""
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								},
								{
									"key": "help",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "postMarvel",
			"item": [
				{
					"name": "/marvel/ - single character as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('spider-man (peter parker)');",
									"});",
									"",
									"pm.test(\"limit returns 3 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"spider man\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/marvel/ - characters as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('spider-man (peter parker)');",
									"});",
									"",
									"pm.test(\"test number of spidermans = 3\", function () {",
									"    const jsonData = pm.response.json();",
									"    const spiders = jsonData.filter(x => x.name.includes('spider'))",
									"    pm.expect(spiders).to.have.lengthOf(3);",
									"});",
									"",
									"pm.test(\"test number of thors = 8\", function () {",
									"    const jsonData = pm.response.json();",
									"    const thors = jsonData.filter(x => x.name.includes('thor'))",
									"    pm.expect(thors).to.have.lengthOf(8);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"spider man,thor odinson\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/marvel/ - characters as array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is spiderman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('spider-man (peter parker)');",
									"});",
									"",
									"pm.test(\"test number of spidermans = 3\", function () {",
									"    const jsonData = pm.response.json();",
									"    const spiders = jsonData.filter(x => x.name.includes('spider'))",
									"    pm.expect(spiders).to.have.lengthOf(3);",
									"});",
									"",
									"pm.test(\"test number of thors = 8\", function () {",
									"    const jsonData = pm.response.json();",
									"    const thors = jsonData.filter(x => x.name.includes('thor'))",
									"    pm.expect(thors).to.have.lengthOf(8);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"spider man\" ,\"thor odinson\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						},
						"description": "Tests the first result (should always be Spider-man), and the limit has returned the correct number of results"
					},
					"response": []
				},
				{
					"name": "/marvel/ - character with the headers name,first appearance,appearances,year as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is iron man\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('iron man (anthony \\\"tony\\\" stark)');",
									"});",
									"",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'first appearance', 'appearances', 'year');",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"limit returns 5 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(5);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"iron man\",\n\t\"h\": \"name,first appearance,appearances,year\",\n\t\"limit\" : 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/ - character with the headers name,first appearance,appearances,year as array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"first result is iron man\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('iron man (anthony \\\"tony\\\" stark)');",
									"});",
									"",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'first appearance', 'appearances', 'year');",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"limit returns 5 results\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(5);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"iron man\",\n\t\"h\": [\"name\" ,\"first appearance\", \"appearances\", \"year\"],\n\t\"limit\" : 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/ - AND keywords as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result is spider-man (peter parker)\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql('spider-man (peter parker)');",
									"});",
									"",
									"pm.test(\"check all results contain spider and man\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['spider', 'man'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"spider+man\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/  - AND keywords as array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"tests if any character name contains spider, man, aqua, and woman\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(0);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"spider+man\", \"aqua+woman\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/ - AND keywords OR keyword as array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"check all results contain spider AND man OR Aqua\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['spider', 'man', 'aqua'].some(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"spider+man\", \"aqua\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/ - AND kewords with sort as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result contains the string vern\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.include('vern');",
									"});",
									"",
									"pm.test(\"check all results contain spider, man\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['spider', 'man'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"spider+man\"],\n\t\"s\": \"name:desc\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/ - AND kewords with sort as array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result contains the string vern\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.include('vern');",
									"});",
									"",
									"pm.test(\"check all results contain spider, man\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['spider', 'man'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"spider+man\"],\n\t\"s\": [\n\t\t{ \"column\": \"name\", \"sort\": \"desc\" }\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/ - AND kewords with sort as object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"test if the first result contains the string vern\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.include('vern');",
									"});",
									"",
									"pm.test(\"check all results contain spider, man\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['spider', 'man'].every(bit => string.includes(bit))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": [\"spider+man\"],\n\t\"s\": { \"column\": \"name\", \"sort\": \"desc\" }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/ - AND kewords with exclusions as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"sex\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"check all results contain spider and man, but exclude earth\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['spider', 'man'].every(bit => string.includes(bit) && !string.includes('earth'))",
									"        );",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"spider+man,-earth\",\n\t\"h\": [\"name\", \"first appearance\", \"appearances\", \"sex\", \"year\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/marvel/ - keword with exclusion and with the headers name,first appearance,appearances,sex,year with multisort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"response object all keys present check\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.be.an('object').that.has.all.keys('name', 'appearances', 'first appearance', 'sex', 'year');",
									"});",
									"",
									"pm.test(\"response object schema check\", function () {",
									"    const jsonData = pm.response.json();",
									"    const schema = {",
									"        \"name\": \"string\",",
									"        \"first appearance\": \"string\",",
									"        \"appearances\": \"integer\",",
									"        \"sex\": \"string\",",
									"        \"year\": \"integer\"",
									"    };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"check all results contain man, but exclude woman\", function () {",
									"    const jsonData = pm.response.json();",
									"    const names = jsonData.map(x => x.name);",
									"    names.forEach((itm) => {",
									"        pm.expect(itm).to.satisfy(string =>",
									"          ['man'].every(bit => string.includes(bit) && !string.includes('woman'))",
									"        );",
									"    });",
									"});",
									"",
									"pm.test(\"check sort order for year 1963\", function () {",
									"    const jsonData = pm.response.json();",
									"    const sorted = jsonData.filter(x => x.year === 1963);",
									"    pm.expect(sorted[0].year).to.be.eql(sorted[1].year);",
									"    pm.expect(sorted[0].appearances).to.be.gte(sorted[1].appearances);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"character\": \"man,-woman\",\n\t\"h\": [\"name\", \"first appearance\", \"appearances\", \"sex\", \"year\"],\n\t\"s\": [\n\t\t{ \"column\": \"year\", \"sort\": \"asc\" },\n\t\t{ \"column\": \"appearances\", \"sort\": \"desc\" }\n\t]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/marvel/",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"marvel",
								""
							],
							"query": [
								{
									"key": "format",
									"value": "json",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "healthcheck",
			"item": [
				{
					"name": "https://{{base_url}}/healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d79958-bf3a-428b-975b-657354987a80",
								"exec": [
									"pm.test(\"Status\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{base_url}}/healthcheck",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"healthcheck"
							],
							"query": [
								{
									"key": "h",
									"value": "name,id,eye,appearances,year",
									"disabled": true
								},
								{
									"key": "help",
									"value": "true",
									"disabled": true
								},
								{
									"key": "random",
									"value": "true",
									"disabled": true
								},
								{
									"key": "s",
									"value": "name:asc",
									"disabled": true
								},
								{
									"key": "seed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}